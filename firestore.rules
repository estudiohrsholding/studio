
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Validates if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Validates if the user is the owner of the document.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    /**
     * @description Validates if the user is an admin for the given clubId based on custom claims.
     */
    function isClubAdmin(clubId) {
      return isSignedIn() && request.auth.token.role == 'userAdmin' && request.auth.token.clubId == clubId;
    }

    match /userAdmins/{userAdminId} {
      allow read, write: if isOwner(userAdminId);
    }
    
    match /clubs/{clubId} {
      // Any authenticated user can read club details.
      allow get, list: if isSignedIn();
      // Only the designated admin can create, update, or delete the club document.
      allow create: if isClubAdmin(clubId) && request.resource.data.userAdminId == request.auth.uid;
      allow update, delete: if isClubAdmin(clubId) && resource.data.userAdminId == request.auth.uid;
    }

    /**
     * @description Secures all club-specific subcollections.
     * Enforces that only the admin of the club can write to its subcollections.
     * The `clubId` from the user's auth token MUST match the `clubId` in the document path.
     */
    match /clubs/{clubId}/{collection}/{docId} {
      // Any authenticated user can read data within a club (e.g., POS needs to read items).
      allow get, list: if isSignedIn();
      // Write operations are restricted to the club's admin.
      // This single rule block secures members, inventoryItems, transactions, etc.
      allow create, update, delete: if isClubAdmin(clubId);
    }

    /**
     * @description Allows access to UserReward data for a specific member.
     * This path is separate as it's not nested under /clubs.
     */
    match /members/{memberId}/userRewards/{userRewardId} {
      // For now, assuming only an admin can manage rewards.
      // A more complex rule could allow members to read their own rewards.
      // This requires `memberId` to be linked to `request.auth.uid`, which is not the case here.
      allow read, write: if isSignedIn() && request.auth.token.role == 'userAdmin';
    }

    /**
     * @description Allows public read access to global Reward definitions.
     * Writes are disallowed as there is no ownership field on a reward.
     */
    match /rewards/{rewardId} {
      allow get, list: if true;
      allow write: if false; // No ownership context to safely allow writes.
    }
  }
}
